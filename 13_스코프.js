//스코프란
/*
스코프는 유효범위임, 즉 매개변수의 유효범위가 어디까지인지?

var 키워드로 선언한 변수와 let, const로 선언한 변수의 스코프는 다르게 동작한다.
변수는 자신이 선언된 위치에 의해 자신이 유효한 범위가 결정된다.

=> 모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다.
   식별자가 유효한 범위를 스코프라고 한다.
 */
var x = 'global';
function foo(){
    var x = 'local';
    console.log(x);     //local 출력
}
foo();
console.log(x);         //global 출력

//식별자 결정
/*
위의 예제에서, x 변수가 2개 존재한다. 이 때, 자바스크립트 엔진은 어떤 변수를 참조해야 할 것인지 결정해야 한다.
결정할 때는 스코프를 통해 결정한다. 따라서 스코프는 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다.

엔진은 코드의 문맥을 고려한다.
렉시컬 환경 : 코드가 어디서 실행되며 주변에 어떤 코드가 있는지 -> 코드의 문맥은 렉시컬 환경으로 이루어진다.
실행 컨텍스트 : 이를 구현한 것(?) -> 모든 코드는 실행 컨텍스트에서 평가되고 실행된다.

위의 예제에서 변수 x 2개는 이름은 같지만, 스코프가 다른 별개의 변수다.
global 값이 들은 x 변수는 어디서든 참조가 가능하지만, foo 함수 내부의 x값은 함수 외부에서 참조할 수 없다

만약 스코프라는 개념이 없다면 같은 이름을 갖는 변수는 충돌을 일으키므로 프로그램 전체에서 하나만 사용 가능하다.
하지만!! 식별자는 고유한 이름을 말한다 즉, 식별자는 어떤 값을 구별할 수 있어야 하므로 유일해야 한다.
스코프 내에서 식별자는 유일해야 하고, 스코프가 다르다면 같은 이름의 식별자를 사용할 수 있다(=네임스페이스)
스코프 내에서 중복 선언은 허용되지만, 의도치 않게 변수값이 재할당되어 변경되는 부작용을 발생한다. 비추천!
 */

//스코프 종류
/*
전역(global), 지역(local)으로 구분한다. <- 변수가 선언된 위치에 따라 구분된다.

전역 : 코드의 가장 바깥 부분, 전역은 전역 스코프를 만들고, 전역 스코프에 선언된 변수는 전역 변수이다. 어디서든 참조 가능
지역 : 함수 몸체 내부, 지역 스코프를 만든다, 지역 스코프에 선언된 변수는 지역 변수이다. 지역 변수는 자신의 지역 스코프와 그 하위 스코프에서 유효.
 */
var x1 = 'global x1';
var y1 = 'global y1';
function outer(){
    var z1 = "outer's local z1";    //지역변수는 자신의 스코프와 하위 스코프에서 유효하다
    console.log(x1);        //global x1
    console.log(y1);        //global y1
    console.log(z1);        //outer's local z1

    function inner(){
        var x1 = "inner's local x1";
        console.log(x1);    //inner's local x1, 전역변수가 아닌 inner함수 스코프에 선언된 x1이 출력된다 -> 자바스크립트 엔진이 '스코프 체인'을 통해 참조할 변수를 검색했기 때문
        console.log(y1);    //global y1
        console.log(z1);    //outer's local z1, outer함수에 선언된 z1
    }
    inner();
}
outer();
console.log(x1);            //global x1
console.log(y1);            //global y1

//스코프 체인
/*
함수는 중첩될 수 있음 -> 함수의 스코프도 중첩될 수 있음 => 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다는 것을 의미함
모든 스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프이다.
스코프가 계층적으로 연결된 것 = 스코프 체인

변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.
= 변수를 부른 곳의 스코프에서부터 찾아보며, 점점 위로 올라가며 찾는다는 뜻
= 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만, 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없음

스코프 체인은 추상적인 개념이 아니라, 물리적인 실체로 존재한다.
자바스크립트 엔진은 코드를 실행하기 앞서 렉시컬 환경을 실제로 생성한다.
변수 선언이 실행되면 변수 식별자가 렉시컬 환경에 키로 등록, 변수 할당이 일어나면 이 자료구조(렉시컬 환경)의 변수 식별자에 해당하는 값을 변경한다.
 */
function foo1(){
    console.log('global function foo1');
}
function bar(){
    function foo1(){
        console.log('local function foo1');
    }
    foo1();     //local function foo1 실행
}
bar();
foo1();         //global function foo1 실행
/*
위의 경우는 함수 호이스팅에 따라, 런타임 이전에 함수 객체가 생성된다.
자바스크립트 엔진은 함수 이름과 동일한 식별자를 암묵적으로 선언하고, 생성된 함수 객체를 할당한다.
따라서 foo1, bar, foo1이 생성될 것이다.
함수도 식별자이기 때문에 스코프를 갖는다.
 */

//함수 레벨 스코프
/*
지역 = 함수 몸체 내부
지역은 지역 스코프를 만든다 == 코드블록이 아닌 함수에 의해서만 지역 스코프가 생성된다.
var 키워드로 선언된 변수는 오로지 함수의 코드블록만을 지역 스코프로 인정한다 = 함수 레벨 스코프

cf. 블록 레벨 스코프
c, 자바 등 대부분의 프로그래밍 언어는 모든 코드블록이 지역 스코프를 만든다.
 */
var a = 1;
if(true){
    var a = 10;
}
console.log(a);  //10
/*
전역변수 a가 선언되고, 블록 내에도 a 변수가 선언되었음.
var 키워드로 선언된 a는 함수 레벨 스코프만 인정하므로, if문 블록안에 선언된 변수 a도 전역변수이다.
따라서 전역 변수의 값이 재할당된 것이다.

var 키워드로 선언된 변수는 오로지 함수의 코드블록만을 지역 스코프로 인정한다.(함수 레벨 스코프)
const, let 키워드는 블록 레벨 스코프를 지원한다!!
 */

//렉시컬 스코프
var b=1;
function foo2(){
    var b = 10;
    bar1();
}
function bar1(){
    console.log(b);
}
foo2();     //1
bar1();     //1
/*
실행 결과는? bar1 함수의 상위 스코프가 무엇인지에 따라 결정된다.

1. 함수를 어디서 호출했는지에 따라 함수의 상위 스코프 결정 => 동적 스코프
2. 함수를 어디서 선언했는지에 따라 함수의 상위 스코프 결정 => 렉시컬 스코프, 정적 스코프

동적 스코프
어디서 호출될 지 알 수 없다, 함수가 호출되는 시점에 동적으로 상위 스코프를 결정해야 함

★렉시컬 스코프, 정적 스코프
상위 스코프가 동적으로 변하지 않음, 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정된다.

자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다!!
함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다.
함수 정의(함수 선언문 또는 함수 표현식)가 실행되어 생성된 함수 객체는 결정된 상위 스코프를 기억한다.
 */