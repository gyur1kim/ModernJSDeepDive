/*
ES5까지는? var키워드를 사용해야만 변수를 선언할 수 있었음

var 키워드의 특징
1. 변수 중복 선언 허용
중복선언 시 초기화문의 유무에 따라 다르게 동작한다.
초기화문 있으면? -> 먼저 선언된 값이 변경된다
초기화문 없으면? -> 무시

2. 함수 레벨 스코프
var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.
이 말은 즉슨 if문, for문 등과 같은 코드블록 내의 변수도 global 변수가 된다.
함수 레벨 스코프는 전역 변수를 남발할 가능성을 높인다. 이로 인해 의도치 않게 전역 변수가 중복 선언되는 경우가 발생한다.
 */
var x = 1;
if(true){
    var x = 10;     //지역 변수가 아니라 전역 변수 x이기 때문에 x=10이 된다.
}
console.log(x);     //10출력
var i=10;
for(var i=0; i<5; i++){     //블록은 다르지만, 함수가 아니기 때문에 i는 전역변수가 된다.
    console.log(i);
}
console.log(i);      //따라서 실행하면 10이 아니라 5가 된다.
/*
3. 변수 호이스팅
변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어 올려진 것처럼 동작한다.
변수 선언 이전에 변수를 참조하는 것은 에러는 일어나지 않지만(변수 호이스팅), 프로그램의 흐름상 맞지 않고, 가독성을 떨어뜨린다.
 */

//let 키워드
/*
var 키워드의 단점을 보완하기 위한 새로운 변수 키워드!
1. 변수 중복 선언 금지
 */
let bar = 123;
//let bar = 456;   //SyntaxError: Identifier 'bar' has already been declared
/*
2. 블록 레벨 스코프
모든 코드블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.
 */
let foo = 1;
{
    let foo = 2;
    let bar = 3;
}
console.log(foo);   // 1
console.log(bar);   // 123
