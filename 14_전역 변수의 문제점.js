/*
전역 변수의 무분별한 사용은 위험하다.
굳이 사용할 이유가 없다면 사용하지 말자
 */

//변수의 생명주기
/*
변수는 생성되고, 할당되고, 소멸되는 생명주기가 존재한다.
변수는 자신이 선언된 위치에서 생성되고 소멸한다.
함수 내부의 변수는 함수가 종료되면 소멸한다.

변수 호이스팅 기억하는가? -> 런타임 이전단계에 자바스크립트 엔진에 의해 먼저 실행되어 변수를 선언하는 것
이는 전역변수만 해당되는 이야기다.
함수 내부에 선언한 변수는 함수가 호출되 직후에 함수 몸체의 코드가 순차적으로 실행되기 전에 자바스크립트 엔진에 의해 먼저 실행
= 자바스크립트 엔진에 의해 선언되고, undefinde값이 들어있음. 추후에 함수 몸체 코드를 실행하며 값을 할당한다.
지역변수의 생명주기는 함수의 생명주기와 일치한다.

물론 일치하지 않는 경우(=지역 변수가 함수보다 오래 생존하는 경우)도 있다.
지역변수는 함수가 생성한 스코프(=렉시컬 환경, 물리적인 실체)에 저장된다. 따라서 스코프에서 없어지기 전까지 존재한다.

변수(할당된 메모리 공간)는 더 이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환된다. -> 스코프도 마찬가지!
누군가가 스코프를 참조하고 있으면 스코프는 소멸하지 않는다.
=> 일반적으로 함수가 종료하면 함수가 생성한 스코프도 소멸한다.
하지만 누군가가 스코프를 참조하고 있다면? 스코프는 해제되지 않는다.
 */
var x = 'global';
function foo(){
    console.log(x);     //undefined, 이미 지역변수 x는 생성된 상태(undefinde가 할당되어 있음), 지역 스코프를 참조해 출력
    var x = 'local';
}
foo();
console.log(x);         //global
/*
이처럼 호이스팅은 스코프 단위로 동작한다

 */
