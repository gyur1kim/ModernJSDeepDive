/*
전역 변수의 무분별한 사용은 위험하다.
굳이 사용할 이유가 없다면 사용하지 말자
 */

//지역 변수의 생명주기
/*
변수는 생성되고, 할당되고, 소멸되는 생명주기가 존재한다.
변수는 자신이 선언된 위치에서 생성되고 소멸한다.
함수 내부의 변수는 함수가 종료되면 소멸한다.

변수 호이스팅 기억하는가? -> 런타임 이전단계에 자바스크립트 엔진에 의해 먼저 실행되어 변수를 선언하는 것
이는 전역변수만 해당되는 이야기다.
함수 내부에 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 순차적으로 실행되기 전에 자바스크립트 엔진에 의해 먼저 실행
= 자바스크립트 엔진에 의해 선언되고, undefined 값이 들어있음. 추후에 함수 몸체 코드를 실행하며 값을 할당한다.
지역변수의 생명주기는 함수의 생명주기와 일치한다.

물론 일치하지 않는 경우(=지역 변수가 함수보다 오래 생존하는 경우)도 있다.
지역변수는 함수가 생성한 스코프(=렉시컬 환경, 물리적인 실체)에 저장된다. 따라서 스코프에서 없어지기 전까지 존재한다.

변수(할당된 메모리 공간)는 더 이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환된다. -> 스코프도 마찬가지!
누군가가 스코프를 참조하고 있으면 스코프는 소멸하지 않는다.
=> 일반적으로 함수가 종료하면 함수가 생성한 스코프도 소멸한다.
하지만 누군가가 스코프를 참조하고 있다면? 스코프는 해제되지 않는다.
 */
var x = 'global';
function foo(){
    console.log(x);     //undefined, 이미 지역변수 x는 생성된 상태(undefinde가 할당되어 있음), 지역 스코프를 참조해 출력
    var x = 'local';
}
foo();
console.log(x);         //global
/*
이처럼 호이스팅은 스코프 단위로 동작한다
전역 변수의 호이스팅 : 전역 변수 선언이 전역 스코프의 선두로 끌어올려진 것처럼 동작, 전역 전체에서 유효
지역 변수의 호이스팅 : 지역 변수 선언이 지역 스코프의 선두로 끌어올려진 것처럼 동작, 함수 전체에서 유효
호이스팅 == 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징
 */

//전역 변수의 생명 주기
/*
전역 코드는 명시적인 호출 없이 실행된다. == 전역 코드를 실행하는 특별한 진입점(main 함수)이 없고, 곧바로 해석되고 실행된다.
함수는 마지막 문 또는 return을 통해 종료되지만, 전역 코드는 더이상 실행할 문이 없을 때 종료됨

var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다.
** 전역 객체란?
    코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체
    클라이언트 환경(브라우저) - window 객체
    서버 사이드 환경(Node.js) - global 객체
    전역 객체는 표준 빌트인 객체(Object, string, number등)와 환경에 따른 호스트 객체, 그리고 var 키워드로 선언한 전역 변수와 전역 함수
따라서 var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명주기와 일치한다.
 */

//전역 변수의 문제점
/*
1. 암묵적 결합
전역 변수 : 전역, 즉 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다 -> 모든 코드가 전역변수를 참조하고 변경할 수 있는 '암묵적 결합'을 허용
-> 변수가 의도치 않게 상태가 변경될 수 있는 위험성이 높아짐

2. 긴 생명주기
전역 변수는 생명주기가 길다 -> 메모리 리소스를 오랜 시간동안 소비하게 됨
+ var 키워드는 변수의 중복을 허용하므로 전역변수의 이름이 중복될 가능성이 높음
이름이 중복되면? 의도치 않은 재할당이 이루어지게 된다
하지만 전역변수는 생명주기가 짧다 -> 지역 변수의 상태를 변경할 수 있는 시간도 짧고 기회도 적다. = 오류 발생 확률 작고, 메모리 짧은 기간 소비

3. 스코프 체인 상 종점에 존재
스코프 체인은 지역변수->전역변수 순으로 본다. 따라서 전역변수를 찾는 데에 상대적으로 오랜 시간이 걸린다.

4. 네임스페이스 오염
가장 큰 문제점! 파일은 분리되어 있다 해도 하나의 전역 스코프를 공유한다.
따라서 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재하면, 예상치 못한 결과가 나올수도 있음.
 */
